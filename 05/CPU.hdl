// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // Instruction type (A/C)
        Not(in=instruction[15], out=aInst);


        // A-input: either an ALU result or an @address in the instruction
        Mux16(a=outALU, b=instruction, sel=aInst, out=inA);

        // A-load: if an A-instruction or the d1 destination bit is set
        Or(a=aInst, b=instruction[5], out=loadA);

        // A-output: address in RAM and fan-out to other internal CPU components
        ARegister(in=inA, load=loadA, out[0..14]=addressM, out=outA);


        // The "a" bit determines whether we use A or M (RAM[A])
        Mux16(a=outA, b=inM, sel=instruction[12], out=mxAM);


        // The d3 bit determines whether we write the result of an
        // ALU computation to memory when executing a C-instruction.
        And(a=instruction[15], b=instruction[3], out=writeM);


        // Jump bits j1, j2, j3 determine whether we jump upon
        // computing a negative, zero, or positive ALU result
        And(a=instruction[15], b=instruction[2], out=j1);
        And(a=instruction[15], b=instruction[1], out=j2);
        And(a=instruction[15], b=instruction[0], out=j3);

        And(a=j1, b=ng,  out=negJump);
        And(a=j2, b=zr,  out=zeroJump);
        And(a=j3, b=pos, out=posJump);

        Not(in=zr, out=nzr);
        Not(in=ng, out=ngn);
        And(a=ngn, b=nzr, out=pos);

        Or(a=negJump, b=zeroJump, out=negOrZeroJump);
        Or(a=negOrZeroJump, b=posJump, out=jump);


        // If a jump should occur, load the value of the A register,
        // a ROM address from which we'll read the next instruction.
        // If no jump, increment the current counter in order to read
        // the subsequent instruction in ROM.
        PC(in=outA, load=jump, inc=true, reset=reset, out[0..14]=pc);


        // The d2 bit determines whether we write the result of an
        // ALU computation to D when executing a C-instruction.
        And(a=instruction[15], b=instruction[4], out=loadD);

        DRegister(in=outALU, load=loadD, out=outD);


        // Bits c1â€“c6 control which computation ALU performs
        ALU(x=outD,
            zx=instruction[11], // c1
            nx=instruction[10], // c2
            y=mxAM,
            zy=instruction[9],  // c3
            ny=instruction[8],  // c4
            f=instruction[7],   // c5
            no=instruction[6],  // c6
            out=outM,
            out=dIn,
            out=outALU,
            zr=zr,
            ng=ng);
}
